<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Chao&#39;s Blog</title>
    <link>https://ccbyte.github.io/tags/javascript/</link>
    <description>Recent content in javascript on Chao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Nov 2021 12:10:10 +0000</lastBuildDate><atom:link href="https://ccbyte.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Taro/小程序中的页面传参</title>
      <link>https://ccbyte.github.io/2021/taro-delivery-data-between-pages/</link>
      <pubDate>Fri, 12 Nov 2021 12:10:10 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/taro-delivery-data-between-pages/</guid>
      <description>Taro/小程序中的页面传参 方法一：使用小程序跳转功能提供的传参方式（navigateTo, navigateBack）。
方法二：使用vuex方法。 方法三：使用第三方封装好的Router组件（vue-taro-router）。
本篇主要记录下前两种方法。
∵ 第二种方法有局限性，比如在多级页面需要控制数据何时传输的情况，如下两种情况的A/B/C页面： 选择教师负责班级C -&amp;gt; 编辑教师信息B -&amp;gt; 教师信息A C通知B所选择的班级，通过修改store数据的话会导致直接修改到A的数据，C页/B页的保存按钮就没意义了。
幼儿某项活动记录C -&amp;gt; 幼儿更多活动记录B -&amp;gt; 幼儿活动记录A
如果C中某项记录删除/修改了，更新B页，同时也要更新到A页，修改store是最方便的。
∴ 存在需要控制数据和不需要控制数据的情况，两种方法结合使用可能比较好。另外，react版都有类似的方法（[redux](https://redux.js.org/introduction/getting-started)，[tarojs-router-next](https://taro-ext.jd.com/plugin/view/5f64832f0dd8313026e0942b)）当前页往目标页传参 Taro.navigateTo({ url: `../questions/index?id=${id}`, // 由于没类似params/query，手动拼接 }) 当前页往历史页传参 使用Taro.getCurrentPages()可以获得页面栈，栈顶pages[pages.length - 1]就是当前页。
获取到页面实例就可以在上一页用setData申明好数据/方法，在当前页需要时调用更新上一页数据。
// 一般用的就是当前页和上一页之间传参，工具类里面封装好两个方法。 export function getCurrentPage() { // 当前页  const pages = Taro.getCurrentPages(); return pages[pages.length - 1]; } export function getPrevPage() { // 上一页  const pages = Taro.getCurrentPages(); if (pages.length &amp;gt; 1) { return pages[pages.</description>
    </item>
    
    <item>
      <title>You Don&#39;t Know JS阅读笔记</title>
      <link>https://ccbyte.github.io/2021/ydkjs-01/</link>
      <pubDate>Wed, 10 Nov 2021 12:01:50 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/ydkjs-01/</guid>
      <description>YDKJS Note 在阅读YDKJS复习JS时做的一些摘录&amp;amp;笔记，只记录一些重要部分。
进入JavaScript 入门与进阶第二章
值与类型  string number boolean null 和 undefined object symbol （ES6新增类型）  值的比较 Truthy与Falsy 在JavaScript中“falsy”的明确列表如下：
 &amp;quot;&amp;quot; （空字符串） 0, -0, NaN （非法的number） null, undefined false  任何不在这个“falsy”列表中的值都是“truthy”，例如：
 &amp;ldquo;hello&amp;rdquo; 42 true [ ], [ 1, &amp;ldquo;2&amp;rdquo;, 3 ] （数组） { }, { a: 42 } （对象） function foo() { .. } （函数）  类型强制转换 let a = &amp;#34;42&amp;#34; // 显式 let b = Number(a); // 隐式 let b = a * 1; // 两者结果都是 a; // &amp;#34;42&amp;#34; 字符串 b; // 42 数字 等价性中的强制转换 📕 准确描述</description>
    </item>
    
    <item>
      <title>二维数组和树</title>
      <link>https://ccbyte.github.io/2021/array-to-tree/</link>
      <pubDate>Wed, 03 Nov 2021 10:15:23 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/array-to-tree/</guid>
      <description>起因 经过 结果 </description>
    </item>
    
    <item>
      <title>实现简单的表单数据校验功能</title>
      <link>https://ccbyte.github.io/2021/a-easy-validate/</link>
      <pubDate>Fri, 15 Oct 2021 19:33:03 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/a-easy-validate/</guid>
      <description>实现表单数据校验功能 因为项目用的UI库功能太少，表单不具备校验功能，所以自己写了一个很简陋的，只有一个文件。
使用 import { required, email, useValidate } from &amp;#39;validate&amp;#39; let rules = { username: { name:&amp;#39;邮箱号&amp;#39;, validate: [required, email] }, // name用于错误提示，validate是需要符合的校验规则列表  password: { name:&amp;#39;密码&amp;#39;, validate: [required] } } useValidate(formData, rules) 源文件 📝 validate.js
// 校验的主函数 export const useValidate = (formData, rules) =&amp;gt; { return Promise.all( Object.entries(rules).map(([key, rule]) =&amp;gt; { return Promise.all( rule.validate.map(func =&amp;gt; func(formData[key])) ).catch((err) =&amp;gt; { console.log(rule.name + err) // 错误提示（打印或弹窗）  return Promise.reject() }) }) ) } // 以下都是一些常见的校验方法 // 是否必填 export const required = (value) =&amp;gt; { return isEmpty(value) ?</description>
    </item>
    
    <item>
      <title>在vue3中实现mapAction和mapGetters功能</title>
      <link>https://ccbyte.github.io/2021/use-vuex-map-method-in-vue3/</link>
      <pubDate>Tue, 12 Oct 2021 18:29:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/use-vuex-map-method-in-vue3/</guid>
      <description>vue2 mixin.js
import { mapGetters, mapActions } from &amp;#39;vuex&amp;#39; export const storeMixin = { computed: { ...mapGetters([ &amp;#39;dataA&amp;#39;, &amp;#39;dataB&amp;#39; ]) }, methods: { ...mapActions([ &amp;#39;setDataA&amp;#39;, &amp;#39;setDataB&amp;#39;, ]), } } return storeMixin 页面中使用
import mixin from &amp;#39;mixin.js&amp;#39; export default { mixins: [mixin], data () { return {} }, methods: { func() {} } } vue3 使用vue3 Composition API可以避免vue2 mixins混入的重名问题。
但是由于vue3的setup()中没有this指向vue实例，所以需要useStore()方法来获取store，同时1.使用以下方法封装一个mapGetters 2.在store._actions中可以获取到所有的action并解构出来。
工具类中封装
/** * 在composition api中代替mapGetters * @param {Object} 如store.getters * @returns 包含所有getter，解构使用 */ export const useGetters = (getters) =&amp;gt; { return Object.</description>
    </item>
    
    <item>
      <title>小程序原生组件层级过高的解决方法</title>
      <link>https://ccbyte.github.io/2021/miniprogram-comp-z/</link>
      <pubDate>Thu, 26 Aug 2021 18:27:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/miniprogram-comp-z/</guid>
      <description>原生组件层级过高问题 例如input, textarea, Canvas，如果要在页面上加弹层，且页面上有这些元素的话这些元素会高于其他包括遮罩overlay，因为原生小程序的层级最高。
解决方法 cover-view 没太大用，能嵌套的内容有限。
手动控制 在某个需要的地方添加该样式，再弹窗时通过vuex动态控制微信原生组件的状态。
&amp;amp;.wechat-comp-disabled { .at-textarea { pointer-events: none; } .at-input { pointer-events: none; } .canvas { pointer-events: none; } // 也可改为display: none;看效果而定 } </description>
    </item>
    
    <item>
      <title>时间处理库date-fns的常见应用</title>
      <link>https://ccbyte.github.io/2021/date-fns-usage/</link>
      <pubDate>Sun, 25 Jul 2021 20:13:03 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/date-fns-usage/</guid>
      <description>时间处理库Date-fns (v2.25.0) 这个库功能十分齐全，可能需要科学上网，这里记录一下之前做项目中常用的方法。
npm i date-fns 格式化(format) 📚
import { format } from &amp;#39;date-fns&amp;#39; format(new Date(), &amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;) // &amp;lt;String&amp;gt; 2021-07-25 20:13:03 日期差(intervalToDuration) 📚
根据出生日期得到几岁 import { intervalToDuration } from &amp;#39;date-fns&amp;#39; let birthday = new Date(&amp;#39;1997-07-01&amp;#39;) const { years, months, days } = intervalToDuration({ start: new Date(birthday), end: new Date() }) // year即年龄，months和day可以再精确到天 时间差(differenceInMinutes) 📚
比较开始时间和结束时间 if(differenceInMinutes(formData.end, formData.start) &amp;lt; 0) { console.log(&amp;#39;开始时间小于结束时间&amp;#39;) } 本地化/I18n(locale) 📚
输出中文年月日 只有format相关函数支持
import format from &amp;#39;date-fns/format&amp;#39; import { zhCN } from &amp;#39;date-fns/locale&amp;#39; format(new Date(), &amp;#34;yyyy&amp;#39;年&amp;#39;M&amp;#39;月&amp;#39;d日&amp;#34;, {locale: zhCN}) // 单个M在1~9月不补0 日期计算(addDays, subDays, addMonts, subMonth&amp;hellip;) 📚 这里太多了，还有📚addWeeks等等。</description>
    </item>
    
  </channel>
</rss>
