<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Chao&#39;s Blog</title>
    <link>https://ccbyte.github.io/posts/</link>
    <description>Recent content in Posts on Chao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Nov 2021 12:10:10 +0000</lastBuildDate><atom:link href="https://ccbyte.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Taro/小程序中的页面传参</title>
      <link>https://ccbyte.github.io/2021/taro-delivery-data-between-pages/</link>
      <pubDate>Fri, 12 Nov 2021 12:10:10 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/taro-delivery-data-between-pages/</guid>
      <description>Taro/小程序中的页面传参 方法一：使用小程序跳转功能提供的传参方式（navigateTo, navigateBack）。
方法二：使用vuex方法。 方法三：使用第三方封装好的Router组件（vue-taro-router）。
本篇主要记录下前两种方法。
∵ 第二种方法有局限性，比如在多级页面需要控制数据何时传输的情况，如下两种情况的A/B/C页面：
选择教师负责班级C -&amp;gt; 编辑教师信息B -&amp;gt; 教师信息A C通知B所选择的班级，通过修改store数据的话会导致直接修改到A的数据，C页/B页的保存按钮就没意义了。
幼儿某项活动记录C -&amp;gt; 幼儿更多活动记录B -&amp;gt; 幼儿活动记录A
如果C中某项记录删除/修改了，更新B页，同时也要更新到A页，修改store是最方便的。
∴ 存在需要控制数据和不需要控制数据的情况，两种方法结合使用可能比较好。
另外，react版都有类似的方法（redux，tarojs-router-next）
当前页往目标页传参 Taro.navigateTo({ url: `../questions/index?id=${id}`, // 由于没类似params/query，手动拼接 }) 当前页往历史页传参 使用Taro.getCurrentPages()可以获得页面栈，栈顶pages[pages.length - 1]就是当前页。
获取到页面实例就可以在上一页用setData申明好数据/方法，在当前页需要时调用更新上一页数据。
// 一般用的就是当前页和上一页之间传参，工具类里面封装好两个方法。 export function getCurrentPage() { // 当前页  const pages = Taro.getCurrentPages(); return pages[pages.length - 1]; } export function getPrevPage() { // 上一页  const pages = Taro.getCurrentPages(); if (pages.length &amp;gt; 1) { return pages[pages.</description>
    </item>
    
    <item>
      <title>You Don&#39;t Know JS阅读笔记</title>
      <link>https://ccbyte.github.io/2021/ydkjs-01/</link>
      <pubDate>Wed, 10 Nov 2021 12:01:50 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/ydkjs-01/</guid>
      <description>YDKJS Note 在阅读YDKJS复习JS时做的一些摘录&amp;amp;笔记，只记录一些重要部分。
进入JavaScript 入门与进阶第二章
值与类型  string number boolean null 和 undefined object symbol （ES6新增类型）  值的比较 Truthy与Falsy 在JavaScript中“falsy”的明确列表如下：
 &amp;quot;&amp;quot; （空字符串） 0, -0, NaN （非法的number） null, undefined false  任何不在这个“falsy”列表中的值都是“truthy”，例如：
 &amp;ldquo;hello&amp;rdquo; 42 true , [ 1, &amp;ldquo;2&amp;rdquo;, 3 ] （数组） { }, { a: 42 } （对象） function foo() { .. } （函数）  类型强制转换 let a = &amp;#34;42&amp;#34; // 显式 let b = Number(a); // 隐式 let b = a * 1; // 两者结果都是 a; // &amp;#34;42&amp;#34; 字符串 b; // 42 数字 等价性中的强制转换 📕 准确描述 ==在允许强制转换的条件下检查值的等价性，而===是在不允许强制转换的条件下检查值的等价性。</description>
    </item>
    
    <item>
      <title>Hugo博客/Leaveit主题优化</title>
      <link>https://ccbyte.github.io/2021/blogs-optimize/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/blogs-optimize/</guid>
      <description>主题优化 很喜欢hugo的这个主题。
评论模块 该主题不自带评论模块，需要我们手动添加，挑了一下选了Utterances。
Utterances使用Github登录评论，Valine可匿名评论但要备案才能用，两个都加再页面上了，根据配置来，配了一个注释掉另一个配置就行。
新增评论模块页 📝 content/themes/LeaveIt/layouts/partials/comments.html
&amp;lt;!-- valine --&amp;gt; {{- if .Site.Params.valine.enable -}} &amp;lt;!-- id 将作为查询条件 --&amp;gt; &amp;lt;span id=&amp;#34;{{ .URL | relURL }}&amp;#34; class=&amp;#34;leancloud_visitors&amp;#34; data-flag-title=&amp;#34;{{ .Title }}&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;post-meta-item-text&amp;#34;&amp;gt;阅读量 &amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;leancloud-visitors-count&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;div id=&amp;#34;vcomments&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;//cdn1.lncld.net/static/js/3.0.4/av-min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#39;//unpkg.com/valine/dist/Valine.min.js&amp;#39;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; new Valine({ el: &amp;#39;#vcomments&amp;#39; , appId: &amp;#39;{{ .Site.Params.valine.appId }}&amp;#39;, appKey: &amp;#39;{{ .Site.Params.valine.appKey }}&amp;#39;, notify: {{ .Site.Params.valine.notify }}, verify: {{ .Site.Params.valine.verify }}, avatar:&amp;#39;{{ .Site.Params.valine.avatar }}&amp;#39;, placeholder: &amp;#39;{{ .</description>
    </item>
    
    <item>
      <title>Electron学习笔记</title>
      <link>https://ccbyte.github.io/2021/electron-note/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/electron-note/</guid>
      <description>Electron 学习笔记 导图 基本介绍 Electron三个组成部分  Chormium - UI   Web生态兼容性  Node.js - 底层操作   文件读写； 使用C++；  Native API - 跨平台   统一原生界面如窗口，托盘； 系统能力：Notification； 基础能力：软件更新/崩溃；  浏览器发展史 Nexus世界上第一个浏览器
Mosaic - Mozilla - NetScape（所有浏览器的UA(user-agent)都会带上Mozilla）
IE (1995 Microsoft)
JavaScript (1995 NetScape) Brendan Eich - 10天完成！
开源Mozilla - 火狐
Chrome (2008,极简 多进程 v8)
Chrominum 开源 node.js 开源 v8开源
node-webkit (NW 2011) Github前五 - 赵成 （后加入Github Atom 项目组)
Atom-shell -&amp;gt; Electron (2013-&amp;gt;2015)</description>
    </item>
    
    <item>
      <title>实现简单的表单数据校验功能</title>
      <link>https://ccbyte.github.io/2021/a-easy-validate/</link>
      <pubDate>Fri, 15 Oct 2021 19:33:03 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/a-easy-validate/</guid>
      <description>实现表单数据校验功能 因为项目用的UI库功能太少，表单不具备校验功能，所以自己写了一个很简陋的，只有一个文件。
使用 import { required, email, useValidate } from &amp;#39;validate&amp;#39; let rules = { username: { name:&amp;#39;邮箱号&amp;#39;, validate: [required, email] }, // name用于错误提示，validate是需要符合的校验规则列表  password: { name:&amp;#39;密码&amp;#39;, validate: [required] } } useValidate(formData, rules) 源文件 📝 validate.js
// 校验的主函数 export const useValidate = (formData, rules) =&amp;gt; { return Promise.all( Object.entries(rules).map(([key, rule]) =&amp;gt; { return Promise.all( rule.validate.map(func =&amp;gt; func(formData[key])) ).catch((err) =&amp;gt; { console.log(rule.name + err) // 错误提示（打印或弹窗）  return Promise.reject() }) }) ) } // 以下都是一些常见的校验方法 // 是否必填 export const required = (value) =&amp;gt; { return isEmpty(value) ?</description>
    </item>
    
    <item>
      <title>在vue3中实现mapAction和mapGetters功能</title>
      <link>https://ccbyte.github.io/2021/use-vuex-map-method-in-vue3/</link>
      <pubDate>Tue, 12 Oct 2021 18:29:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/use-vuex-map-method-in-vue3/</guid>
      <description>vue2 mixin.js
import { mapGetters, mapActions } from &amp;#39;vuex&amp;#39; export const storeMixin = { computed: { ...mapGetters([ &amp;#39;dataA&amp;#39;, &amp;#39;dataB&amp;#39; ]) }, methods: { ...mapActions([ &amp;#39;setDataA&amp;#39;, &amp;#39;setDataB&amp;#39;, ]), } } return storeMixin 页面中使用
import mixin from &amp;#39;mixin.js&amp;#39; export default { mixins: [mixin], data () { return {} }, methods: { func() {} } } vue3 使用vue3 Composition API可以避免vue2 mixins混入的重名问题。
但是由于vue3的setup()中没有this指向vue实例，所以需要useStore()方法来获取store，同时1.使用以下方法封装一个mapGetters 2.在store._actions中可以获取到所有的action并解构出来。
工具类中封装
/** * 在composition api中代替mapGetters * @param {Object} 如store.getters * @returns 包含所有getter，解构使用 */ export const useGetters = (getters) =&amp;gt; { return Object.</description>
    </item>
    
    <item>
      <title>小程序原生组件层级过高的解决方法</title>
      <link>https://ccbyte.github.io/2021/miniprogram-comp-z/</link>
      <pubDate>Thu, 26 Aug 2021 18:27:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/miniprogram-comp-z/</guid>
      <description>原生组件层级过高问题 例如input, textarea, Canvas，如果要在页面上加弹层，且页面上有这些元素的话这些元素会高于其他包括遮罩overlay，因为原生小程序的层级最高。
解决方法 cover-view 没太大用，能嵌套的内容有限。
手动控制 在某个需要的地方添加该样式，再弹窗时通过vuex动态控制微信原生组件的状态。
&amp;amp;.wechat-comp-disabled { .at-textarea { pointer-events: none; } .at-input { pointer-events: none; } .canvas { pointer-events: none; } // 也可改为display: none;看效果而定 } </description>
    </item>
    
    <item>
      <title>时间处理库date-fns的常见应用</title>
      <link>https://ccbyte.github.io/2021/date-fns-usage/</link>
      <pubDate>Sun, 25 Jul 2021 20:13:03 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2021/date-fns-usage/</guid>
      <description>时间处理库Date-fns (v2.25.0) 这个库功能十分齐全，可能需要科学上网，这里记录一下之前做项目中常用的方法。
npm i date-fns 格式化(format) 📚
import { format } from &amp;#39;date-fns&amp;#39; format(new Date(), &amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;) // &amp;lt;String&amp;gt; 2021-07-25 20:13:03 日期差(intervalToDuration) 📚
根据出生日期得到几岁 import { intervalToDuration } from &amp;#39;date-fns&amp;#39; let birthday = new Date(&amp;#39;1997-07-01&amp;#39;) const { years, months, days } = intervalToDuration({ start: new Date(birthday), end: new Date() }) // year即年龄，months和day可以再精确到天 时间差(differenceInMinutes) 📚
比较开始时间和结束时间 if(differenceInMinutes(formData.end, formData.start) &amp;lt; 0) { console.log(&amp;#39;开始时间小于结束时间&amp;#39;) } 本地化/I18n(locale) 📚
输出中文年月日 只有format相关函数支持
import format from &amp;#39;date-fns/format&amp;#39; import { zhCN } from &amp;#39;date-fns/locale&amp;#39; format(new Date(), &amp;#34;yyyy&amp;#39;年&amp;#39;M&amp;#39;月&amp;#39;d日&amp;#34;, {locale: zhCN}) // 单个M在1~9月不补0 日期计算(addDays, subDays, addMonts, subMonth&amp;hellip;) 📚 这里太多了，还有📚addWeeks等等。</description>
    </item>
    
    <item>
      <title>使用github的pages功能</title>
      <link>https://ccbyte.github.io/2021/usage-of-github-pages/</link>
      <pubDate>Fri, 25 Jun 2021 20:13:37 +0800</pubDate>
      
      <guid>https://ccbyte.github.io/2021/usage-of-github-pages/</guid>
      <description>使用github的pages功能 以搭建hugo博客为例
首先下载git，官网地址
在github新建仓库，仓库名为：
你的用户名.github.io初始化git
git init 把当前目录环境和显示目录合并
git remote add https://github.com/你的用户名/你的用户名.github.io.git 构建项目到docs目录
hugo -d docs git add git commit git push origin master 在仓库setting中找到pages，设置页面根目录为master分支下的docs目录
最后进入页面 https://你的用户名.github.io</description>
    </item>
    
    <item>
      <title>vscode中配置默认终端</title>
      <link>https://ccbyte.github.io/2020/vscode-terminal/</link>
      <pubDate>Thu, 12 Nov 2020 12:03:03 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2020/vscode-terminal/</guid>
      <description>vscode中配置默认终端 原方法 在设置中找到Terminal › Integrated › Shell: Windows配置项，把它的值改为终端启动路径。
新方法 配置默认 shell 的新推荐方法
 在 Terminal › Integrated › Profiles: Windows 中创建一个终端配置文件 将其配置文件名称设置为 Terminal › Integrated › Default Profile: Windows 中的默认值。  执行完后，运行终端可能会提示迁移配置，点击迁移就ok了。
此操作当前将优先于新的配置文件设置，但将来会发生更改。
🌰 修改默认配置PowerShell
🖥️ 唤起终端 ctrl+shift+`</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://ccbyte.github.io/2014/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2014/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://ccbyte.github.io/2014/goisforlovers/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2014/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://ccbyte.github.io/2014/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2014/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://ccbyte.github.io/2014/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/2014/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.png should become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>二维数组和树</title>
      <link>https://ccbyte.github.io/1/array-to-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/1/array-to-tree/</guid>
      <description>起因 经过 结果 </description>
    </item>
    
    <item>
      <title>自定义小程序checkbox样式&#39;</title>
      <link>https://ccbyte.github.io/1/miniprogram-checkbox-style/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ccbyte.github.io/1/miniprogram-checkbox-style/</guid>
      <description>自定义小程序原生checkbox样式 由于项目有设计稿，要精确还原设计稿的话，本来是打算自己写一个，写是写了，大概原理就是
 隐藏原来的checkbox； 做自己的checkbox样式（比如一个圆圈⚪），通过:active选择器触发样式的更改； 内部元素（比如一个对勾✔），通过伪元素来添加；  后来网上找了一下发现，微信的实现貌似也是类似啊，我直接用下面代码覆盖它的就行了。
/*checkbox 整体大小 */ checkbox { } /*checkbox 选项框大小 */ checkbox .wx-checkbox-input { width: 40rpx; height: 40rpx; border-radius: 50%; border: 3px solid #ccc; } /*checkbox选中后样式 */ checkbox .wx-checkbox-input.wx-checkbox-input-checked { border: 3px solid #8dc21f; background: #8dc21f; } /*checkbox选中后图标样式 */ checkbox .wx-checkbox-input.wx-checkbox-input-checked::before { width: 28rpx; height: 28rpx; line-height: 28rpx; text-align: center; font-size: 26rpx; color: #fff; background: transparent; transform: translate(-50%, -50%) scale(1); -webkit-transform: translate(-50%, -50%) scale(1); } </description>
    </item>
    
  </channel>
</rss>
